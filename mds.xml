<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/integration/kafka
 http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd
 http://www.springframework.org/schema/integration
 http://www.springframework.org/schema/integration/spring-integration.xsd"
           >

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>/pnfs/etc/nfs.properties</value>
                <value>/pnfs/etc/chimera.properties</value>
            </list>
        </property>
        <property name="environment">
            <bean class="org.springframework.core.env.StandardEnvironment" />
        </property>
    </bean>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <description>Database connection pool</description>
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="jdbcUrl" value="${chimera.db.url}"/>
                <property name="username" value="${chimera.db.user}"/>
                <property name="password" value="${chimera.db.password}"/>
                <property name="minimumIdle" value="${chimera.db.pool.min}"/>
                <property name="maximumPoolSize" value="${chimera.db.pool.max}"/>
                <property name="autoCommit" value="true"/>
            </bean>
        </constructor-arg>
    </bean>

    <!--
        Convert protperies with multiple values separated by comma into an array of strings:
        key=value1,value2,value3 : String[] {value1, value2, value3}
    -->
    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="java.lang.String[]"
                       value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor" />
            </map>
        </property>
    </bean>
    <!--
        NFSv4.1 pNFS Data Server manager
    -->
    <bean id="device-manager" class="org.dcache.nfs.DeviceManager" init-method="init">
        <description>Device manager</description>
        <property name="curatorFramework" ref="zk-curator" />
        <property name="chimeraVfs" ref="vfs-intern"/>
        <property name="layoutReturnConsumer" ref="layoutStats" />
    </bean>

    <!--
        FileSystem engine. Currently only Chimera is supported
    -->
    <bean id="tx-manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <description>Database transaction manager</description>
        <property name="dataSource" ref="dataSource"/>
    </bean>

     <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
         <property name="dataSource" ref="dataSource" />
         <property name="changeLog" value="${chimera.db.changeset}" />
         <property name="contexts" value="production" />
     </bean>

     <bean id="fileSystem" class="org.dcache.chimera.JdbcFs" depends-on="liquibase">
        <description>Chimera Filesystem</description>
        <constructor-arg ref="dataSource" />
        <constructor-arg ref="tx-manager" />
    </bean>

    <bean id="vfs-intern" class="org.dcache.nfs.chimera.ChimeraVfs">
        <description>Chimera Filesystem</description>
        <constructor-arg ref="fileSystem"/>
        <constructor-arg ref="idmapd"/>
    </bean>

    <bean id="cache-config" class="org.dcache.nfs.vfs.VfsCacheConfig">
	<property name="maxEntries" value="${nfs.attribute-cache.size}" />
	<property name="lifeTime" value="${nfs.attribute-cache.time}" />
	<property name="timeUnit" value="${nfs.attribute-cache.unit}" />

	<property name="readdirMaxEntries" value="${nfs.readdir-cache.size}" />
	<property name="readdirLifeTime" value="${nfs.readdir-cache.time}" />
	<property name="readdirLifeTimeUnit" value="${nfs.readdir-cache.unit}" />
    </bean>

    <bean id="vfs" class="org.dcache.nfs.vfs.VfsCache">
        <description>VFS Cache</description>
        <constructor-arg ref="device-manager"/>
        <constructor-arg ref="cache-config"/>
    </bean>

    <bean id="export" class="org.dcache.nfs.ExportFile">
        <description>Export file</description>
        <constructor-arg>
            <bean class="java.io.File">
                <constructor-arg value="/pnfs/etc/exports"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="export-init" class="org.dcache.nfs.ExportPathCreator" init-method="init">
        <property name="vfs" ref="vfs-intern"/>
        <property name="exportFile" ref="export" />
    </bean>

    <!--
        NFSv4.1 Operation factory
    -->
    <bean id="mds-factory-inner" class="org.dcache.nfs.v4.MDSOperationFactory">
        <description>MDS operation factory</description>
    </bean>

    <bean id="mds-factory" class="org.dcache.nfs.v4.OperationFactoryMXBeanImpl">
        <description>MDS operation factory JMX wrapper</description>
        <constructor-arg ref="mds-factory-inner"/>
        <constructor-arg value="mds"/>
    </bean>

    <bean id="idmapd" class="org.dcache.nfs.v4.SimpleIdMap" />

    <bean id="state-handler" class="org.dcache.nfs.v4.NFSv4StateHandler">
        <description>NFSv4 client and state handler</description>
        <constructor-arg index="0" value="${nfs.lease.time}"/>
        <constructor-arg index="1" value="0"/>
        <constructor-arg>
            <bean class="org.dcache.nfs.v4.BerkeleyDBClientStore" destroy-method="close">
                <constructor-arg value="${nfs.state.store}" />
            </bean>
        </constructor-arg>
    </bean>

    <!--
       NFSv4.1 MDS
    -->
    <bean id="mds" class="org.dcache.nfs.v4.NFSServerV41Factory" depends-on="export-init">
        <description>NFSv4.1 MDS server</description>
        <property name="operationFactory" ref="mds-factory"/>
        <property name="deviceManager" ref="device-manager" />
        <property name="vfs" ref="vfs" />
        <property name="exportFile" ref="export" />
        <property name="stateHandler" ref="state-handler"/>
    </bean>

    <!-- NFSv4 programm -->
    <bean id="nfsv4-programm" class="org.dcache.oncrpc4j.rpc.OncRpcProgram">
        <description>NFSv4.1 programm number</description>
        <constructor-arg index="0" value="100003" />
        <constructor-arg index="1" value="4" />
    </bean>

    <!--
        ONC RPC service
    -->
    <bean id="oncrpcsvc-builder" class="org.dcache.oncrpc4j.spring.OncRpcSvcFactoryBean">
        <description>Onc RPC service builder for MDS</description>
        <property name="port" value="${mds.port}"/>
        <property name="useTCP" value="true"/>
        <property name="autoPublish" value="false"/>
        <property name="enableJmx" value="true"/>
        <property name="useWorkerPool" value="true"/>
    </bean>

    <bean id="oncrpcsvc" class="org.dcache.oncrpc4j.rpc.OncRpcSvc"
          init-method="start" destroy-method="stop">
        <description>Onc RPC service for MDS</description>
        <constructor-arg ref="oncrpcsvc-builder"/>
        <property name="programs">
            <map>
                <entry key-ref="nfsv4-programm" value-ref="mds"/>
            </map>
        </property>
    </bean>

    <bean id="zk-curator-factory" class="org.dcache.nfs.zk.Curator4Spring">
        <property name="connectString" value="${ZOOKEEPER_CONNECT}" />
    </bean>

    <bean id="zk-curator" factory-bean="zk-curator-factory" factory-method="getCurator" destroy-method="close"/>


    <bean id="iostat-kafka-template" class="org.springframework.kafka.core.KafkaTemplate">
         <constructor-arg>
             <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                 <constructor-arg>
                     <map>
                         <entry key="bootstrap.servers" value="${KAFKA_BOOTSTRAP_SERVER}"/>
                         <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer" />
                         <entry key="value.serializer" value="org.dcache.nfs.IoStatSerializer" />
                     </map>
                 </constructor-arg>
             </bean>
         </constructor-arg>
         <constructor-arg name="autoFlush" value="false" />
         <property name="defaultTopic" value="iostat"/>
     </bean>

    <bean id="ioerr-kafka-template" class="org.springframework.kafka.core.KafkaTemplate">
         <constructor-arg>
             <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                 <constructor-arg>
                     <map>
                         <entry key="bootstrap.servers" value="${KAFKA_BOOTSTRAP_SERVER}"/>
                         <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer" />
                         <entry key="value.serializer" value="org.dcache.nfs.IoErrorSerializer" />
                     </map>
                 </constructor-arg>
             </bean>
         </constructor-arg>
         <constructor-arg name="autoFlush" value="false" />
         <property name="defaultTopic" value="ioerr"/>
     </bean>

     <bean name="layoutStats" class="org.dcache.nfs.KafkaLayoutReturnConsumer">
         <description>Layout return consumer</description>
         <property name="ioErrKafkaTemplate" ref="ioerr-kafka-template" />
         <property name="ioStatKafkaTemplate" ref="iostat-kafka-template" />
     </bean>
</beans>
